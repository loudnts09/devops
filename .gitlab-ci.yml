image: node:22

variables:
  GCP_PROJECT_ID: devops-lourrayni-2024
  GCP_DOCKER_REPO: devops-registry
  GKE_ZONE: us-central1
  GKE_CLUSTER_NAME: autopilot-cluster-2

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .yarn/cache

stages:
  - build
  - test
  - package
  - push-image
  - prepare-to-deploy
  - deploy

build-job:
  stage: build
  script:
    - yarn install
  cache:
    paths:
      - node_modules/
      - .yarn/cache

test-job:
  stage: test
  script:
    - yarn install
    - yarn test
  cache:
    paths:
      - node_modules/
      - .yarn/cache

package-docker:
  image: docker:24.0.0
  stage: package
  services:
    - docker:24.0.0-dind
  script:
    - docker build -t $CI_PROJECT_NAME:${CI_COMMIT_REF_NAME//\//-} .
    - docker save -o docker_image.tar $CI_PROJECT_NAME:${CI_COMMIT_REF_NAME//\//-}
  artifacts:
    paths:
      - docker_image.tar
    expire_in: 1 hour

push-gitlab:
  image: docker:24.0.0
  stage: push-image
  needs:
    - job: package-docker
  services:
    - docker:24.0.0-dind
  script:
    - docker load -i docker_image.tar
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag $CI_PROJECT_NAME:${CI_COMMIT_REF_NAME//\//-} $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME//\//-}
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME//\//-}

push-gcloud:
  image: google/cloud-sdk:latest
  stage: push-image
  variables:
    DOCKER_HOST: "tcp://docker:2375"
  services:
    - docker:24.0.0-dind
  needs:
    - job: package-docker
  before_script:
    # Autenticação no Google Cloud
    - echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
  script:
    - docker load -i docker_image.tar
    - gcloud auth configure-docker us-central1-docker.pkg.dev
    - docker tag $CI_PROJECT_NAME:${CI_COMMIT_REF_NAME//\//-} us-central1-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_DOCKER_REPO/$CI_PROJECT_NAME:${CI_COMMIT_REF_NAME//\//-}
    - docker tag $CI_PROJECT_NAME:${CI_COMMIT_REF_NAME//\//-} us-central1-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_DOCKER_REPO/$CI_PROJECT_NAME:latest
    - docker push us-central1-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_DOCKER_REPO/$CI_PROJECT_NAME:${CI_COMMIT_REF_NAME//\//-}
    - docker push us-central1-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_DOCKER_REPO/$CI_PROJECT_NAME:latest

prepare-infra:
  stage: prepare-to-deploy
  image:
    name: hashicorp/terraform:1.9.5
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  needs: []
  variables:
    TF_ROOT: "./terraform/gke"
    TF_VAR_project_id: "devops-lourrayni-2024"
    TF_VAR_region: "us-central1"
    TF_VAR_cluster_name: "autopilot-cluster-2"
  before_script:
     - echo "$GCLOUD_SERVICE_KEY" | base64 -d > /tmp/account.json
     - export GOOGLE_APPLICATION_CREDENTIALS=/tmp/account.json
     - echo $GOOGLE_APPLICATION_CREDENTIALS
  script:
    - terraform --version  # Exibe a versão do Terraform para confirmação
    - cd $TF_ROOT
    - terraform init        # Inicializa o Terraform
    - terraform import google_container_cluster.primary projects/$GCP_PROJECT_ID/locations/$GKE_ZONE/clusters/$GKE_CLUSTER_NAME || true
    - terraform plan -out=tfplan  # Gera o plano de execução
    - terraform apply -auto-approve tfplan  # Aplica o plano
  environment:
    name: production
    url: https://console.cloud.google.com/kubernetes/list
    
deploy-to-gcp:
  image: google/cloud-sdk:latest
  stage: deploy
  needs:
    - job: push-gcloud
  variables:
    SERVICE_NAME: devops-api
    GOOGLE_REGION: us-central1
    IMAGE_NAME: us-central1-docker.pkg.dev/devops-lourrayni-2024/devops-registry/devops-api:latest
  before_script:
    - echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
  script:
    - gcloud run deploy $SERVICE_NAME --port 3000 --image $IMAGE_NAME --region $GOOGLE_REGION --platform managed --allow-unauthenticated
  # only:
  #   - main
deploy-to-gke:
  image: google/cloud-sdk:latest
  stage: deploy
  needs:
    - job: prepare-infra
    - job: push-gcloud
  variables:
    GKE_ZONE: us-central1
    GKE_CLUSTER_NAME: autopilot-cluster-2
    DEPLOYMENT_NAME: devops-api-deployment
  before_script:
    - echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud config set compute/zone $GKE_ZONE
    - gcloud container clusters get-credentials $GKE_CLUSTER_NAME
  script:
    - kubectl apply -f ./k8s
    - kubectl rollout restart deployment $DEPLOYMENT_NAME